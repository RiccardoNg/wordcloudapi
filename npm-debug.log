0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs',
1 verbose cli   '/usr/bin/npm',
1 verbose cli   'install',
1 verbose cli   '--save',
1 verbose cli   'body-parser' ]
2 info using npm@1.3.10
3 info using node@v0.10.25
4 warn package.json 06-RESTFUL@0.0.0 No description
5 warn package.json 06-RESTFUL@0.0.0 No repository field.
6 warn package.json 06-RESTFUL@0.0.0 No README data
7 verbose readDependencies using package.json deps
8 verbose cache add [ 'body-parser', null ]
9 verbose cache add name=undefined spec="body-parser" args=["body-parser",null]
10 verbose parsed url { protocol: null,
10 verbose parsed url   slashes: null,
10 verbose parsed url   auth: null,
10 verbose parsed url   host: null,
10 verbose parsed url   port: null,
10 verbose parsed url   hostname: null,
10 verbose parsed url   hash: null,
10 verbose parsed url   search: null,
10 verbose parsed url   query: null,
10 verbose parsed url   pathname: 'body-parser',
10 verbose parsed url   path: 'body-parser',
10 verbose parsed url   href: 'body-parser' }
11 silly lockFile 14cf125c-body-parser body-parser
12 verbose lock body-parser /home/deptraisatthu/.npm/14cf125c-body-parser.lock
13 silly lockFile 14cf125c-body-parser body-parser
14 silly lockFile 14cf125c-body-parser body-parser
15 verbose addNamed [ 'body-parser', '' ]
16 verbose addNamed [ null, '*' ]
17 silly lockFile 9f665704-body-parser body-parser@
18 verbose lock body-parser@ /home/deptraisatthu/.npm/9f665704-body-parser.lock
19 silly addNameRange { name: 'body-parser', range: '*', hasData: false }
20 verbose url raw body-parser
21 verbose url resolving [ 'https://registry.npmjs.org/', './body-parser' ]
22 verbose url resolved https://registry.npmjs.org/body-parser
23 info trying registry request attempt 1 at 19:01:14
24 verbose etag "58987517-1e75b"
25 http GET https://registry.npmjs.org/body-parser
26 http 304 https://registry.npmjs.org/body-parser
27 silly registry.get cb [ 304,
27 silly registry.get   { date: 'Tue, 07 Feb 2017 12:01:14 GMT',
27 silly registry.get     via: '1.1 varnish',
27 silly registry.get     'cache-control': 'max-age=300',
27 silly registry.get     etag: '"58987517-1e75b"',
27 silly registry.get     age: '230',
27 silly registry.get     connection: 'keep-alive',
27 silly registry.get     'x-served-by': 'cache-hkg6824-HKG',
27 silly registry.get     'x-cache': 'HIT',
27 silly registry.get     'x-cache-hits': '1',
27 silly registry.get     'x-timer': 'S1486468874.980094,VS0,VE1',
27 silly registry.get     vary: 'Accept-Encoding' } ]
28 verbose etag body-parser from cache
29 silly addNameRange number 2 { name: 'body-parser', range: '*', hasData: true }
30 silly addNameRange versions [ 'body-parser',
30 silly addNameRange   [ '1.0.0',
30 silly addNameRange     '1.0.1',
30 silly addNameRange     '1.0.2',
30 silly addNameRange     '1.1.0',
30 silly addNameRange     '1.1.1',
30 silly addNameRange     '1.1.2',
30 silly addNameRange     '1.2.0',
30 silly addNameRange     '1.2.1',
30 silly addNameRange     '1.2.2',
30 silly addNameRange     '1.3.0',
30 silly addNameRange     '1.3.1',
30 silly addNameRange     '1.4.0',
30 silly addNameRange     '1.4.1',
30 silly addNameRange     '1.4.2',
30 silly addNameRange     '1.4.3',
30 silly addNameRange     '1.5.0',
30 silly addNameRange     '1.5.1',
30 silly addNameRange     '1.5.2',
30 silly addNameRange     '1.6.0',
30 silly addNameRange     '1.6.1',
30 silly addNameRange     '1.6.2',
30 silly addNameRange     '1.6.3',
30 silly addNameRange     '1.6.4',
30 silly addNameRange     '1.6.5',
30 silly addNameRange     '1.6.6',
30 silly addNameRange     '1.6.7',
30 silly addNameRange     '1.7.0',
30 silly addNameRange     '1.8.0',
30 silly addNameRange     '1.8.1',
30 silly addNameRange     '1.8.2',
30 silly addNameRange     '1.8.3',
30 silly addNameRange     '1.8.4',
30 silly addNameRange     '1.9.0',
30 silly addNameRange     '1.9.1',
30 silly addNameRange     '1.9.2',
30 silly addNameRange     '1.9.3',
30 silly addNameRange     '1.10.0',
30 silly addNameRange     '1.10.1',
30 silly addNameRange     '1.10.2',
30 silly addNameRange     '1.11.0',
30 silly addNameRange     '1.12.0',
30 silly addNameRange     '1.12.1',
30 silly addNameRange     '1.12.2',
30 silly addNameRange     '1.12.3',
30 silly addNameRange     '1.12.4',
30 silly addNameRange     '1.13.0',
30 silly addNameRange     '1.13.1',
30 silly addNameRange     '1.13.2',
30 silly addNameRange     '1.13.3',
30 silly addNameRange     '1.14.0',
30 silly addNameRange     '1.14.1',
30 silly addNameRange     '1.14.2',
30 silly addNameRange     '1.15.0',
30 silly addNameRange     '1.15.1',
30 silly addNameRange     '1.15.2',
30 silly addNameRange     '1.16.0' ] ]
31 verbose addNamed [ 'body-parser', '1.16.0' ]
32 verbose addNamed [ '1.16.0', '1.16.0' ]
33 silly lockFile 05c136ba-body-parser-1-16-0 body-parser@1.16.0
34 verbose lock body-parser@1.16.0 /home/deptraisatthu/.npm/05c136ba-body-parser-1-16-0.lock
35 silly lockFile 05c136ba-body-parser-1-16-0 body-parser@1.16.0
36 silly lockFile 05c136ba-body-parser-1-16-0 body-parser@1.16.0
37 silly lockFile 9f665704-body-parser body-parser@
38 silly lockFile 9f665704-body-parser body-parser@
39 silly resolved [ { name: 'body-parser',
39 silly resolved     description: 'Node.js body parsing middleware',
39 silly resolved     version: '1.16.0',
39 silly resolved     contributors: [ [Object], [Object] ],
39 silly resolved     license: 'MIT',
39 silly resolved     repository: { type: 'git', url: 'git://github.com/expressjs/body-parser' },
39 silly resolved     dependencies:
39 silly resolved      { bytes: '2.4.0',
39 silly resolved        'content-type': '~1.0.2',
39 silly resolved        debug: '2.6.0',
39 silly resolved        depd: '~1.1.0',
39 silly resolved        'http-errors': '~1.5.1',
39 silly resolved        'iconv-lite': '0.4.15',
39 silly resolved        'on-finished': '~2.3.0',
39 silly resolved        qs: '6.2.1',
39 silly resolved        'raw-body': '~2.2.0',
39 silly resolved        'type-is': '~1.6.14' },
39 silly resolved     devDependencies:
39 silly resolved      { eslint: '3.13.1',
39 silly resolved        'eslint-config-standard': '6.2.1',
39 silly resolved        'eslint-plugin-markdown': '1.0.0-beta.3',
39 silly resolved        'eslint-plugin-promise': '3.4.0',
39 silly resolved        'eslint-plugin-standard': '2.0.1',
39 silly resolved        istanbul: '0.4.5',
39 silly resolved        methods: '1.1.2',
39 silly resolved        mocha: '2.5.3',
39 silly resolved        supertest: '1.1.0' },
39 silly resolved     files: [ 'lib/', 'LICENSE', 'HISTORY.md', 'index.js' ],
39 silly resolved     engines: { node: '>= 0.8' },
39 silly resolved     scripts:
39 silly resolved      { lint: 'eslint --plugin markdown --ext js,md .',
39 silly resolved        test: 'mocha --require test/support/env --reporter spec --check-leaks --bail test/',
39 silly resolved        'test-cov': 'istanbul cover node_modules/mocha/bin/_mocha -- --require test/support/env --reporter dot --check-leaks test/',
39 silly resolved        'test-travis': 'istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --require test/support/env --reporter spec --check-leaks test/' },
39 silly resolved     readme: '# body-parser\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nNode.js body parsing middleware.\n\nParse incoming request bodies in a middleware before your handlers, available\nunder the `req.body` property.\n\n[Learn about the anatomy of an HTTP transaction in Node.js](https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/).\n\n_This does not handle multipart bodies_, due to their complex and typically\nlarge nature. For multipart bodies, you may be interested in the following\nmodules:\n\n  * [busboy](https://www.npmjs.org/package/busboy#readme) and\n    [connect-busboy](https://www.npmjs.org/package/connect-busboy#readme)\n  * [multiparty](https://www.npmjs.org/package/multiparty#readme) and\n    [connect-multiparty](https://www.npmjs.org/package/connect-multiparty#readme)\n  * [formidable](https://www.npmjs.org/package/formidable#readme)\n  * [multer](https://www.npmjs.org/package/multer#readme)\n\nThis module provides the following parsers:\n\n  * [JSON body parser](#bodyparserjsonoptions)\n  * [Raw body parser](#bodyparserrawoptions)\n  * [Text body parser](#bodyparsertextoptions)\n  * [URL-encoded form body parser](#bodyparserurlencodedoptions)\n\nOther body parsers you might be interested in:\n\n- [body](https://www.npmjs.org/package/body#readme)\n- [co-body](https://www.npmjs.org/package/co-body#readme)\n\n## Installation\n\n```sh\n$ npm install body-parser\n```\n\n## API\n\n<!-- eslint-disable no-unused-vars -->\n\n```js\nvar bodyParser = require(\'body-parser\')\n```\n\nThe `bodyParser` object exposes various factories to create middlewares. All\nmiddlewares will populate the `req.body` property with the parsed body, or an\nempty object (`{}`) if there was no body to parse (or an error was returned).\n\nThe various errors returned by this module are described in the\n[errors section](#errors).\n\n### bodyParser.json(options)\n\nReturns middleware that only parses `json`. This parser accepts any Unicode\nencoding of the body and supports automatic inflation of `gzip` and `deflate`\nencodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`).\n\n#### Options\n\nThe `json` function takes an option `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `\'100kb\'`.\n\n##### reviver\n\nThe `reviver` option is passed directly to `JSON.parse` as the second\nargument. You can find more information on this argument\n[in the MDN documentation about JSON.parse](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#Example.3A_Using_the_reviver_parameter).\n\n##### strict\n\nWhen set to `true`, will only accept arrays and objects; when `false` will\naccept anything `JSON.parse` accepts. Defaults to `true`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `json`), a mime type (like\n`application/json`), or a mime type with a wildcard (like `*/*` or `*/json`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `application/json`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.raw(options)\n\nReturns middleware that parses all bodies as a `Buffer`. This parser\nsupports automatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a `Buffer` object\nof the body.\n\n#### Options\n\nThe `raw` function takes an option `options` object that may contain any of\nthe following keys:\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `\'100kb\'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `bin`), a mime type (like\n`application/octet-stream`), or a mime type with a wildcard (like `*/*` or\n`application/*`). If a function, the `type` option is called as `fn(req)`\nand the request is parsed if it returns a truthy value. Defaults to\n`application/octet-stream`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.text(options)\n\nReturns middleware that parses all bodies as a string. This parser supports\nautomatic inflation of `gzip` and `deflate` encodings.\n\nA new `body` string containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This will be a string of the\nbody.\n\n#### Options\n\nThe `text` function takes an option `options` object that may contain any of\nthe following keys:\n\n##### defaultCharset\n\nSpecify the default character set for the text content if the charset is not\nspecified in the `Content-Type` header of the request. Defaults to `utf-8`.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `\'100kb\'`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `txt`), a mime type (like\n`text/plain`), or a mime type with a wildcard (like `*/*` or `text/*`).\nIf a function, the `type` option is called as `fn(req)` and the request is\nparsed if it returns a truthy value. Defaults to `text/plain`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n### bodyParser.urlencoded(options)\n\nReturns middleware that only parses `urlencoded` bodies. This parser accepts\nonly UTF-8 encoding of the body and supports automatic inflation of `gzip`\nand `deflate` encodings.\n\nA new `body` object containing the parsed data is populated on the `request`\nobject after the middleware (i.e. `req.body`). This object will contain\nkey-value pairs, where the value can be a string or array (when `extended` is\n`false`), or any type (when `extended` is `true`).\n\n#### Options\n\nThe `urlencoded` function takes an option `options` object that may contain\nany of the following keys:\n\n##### extended\n\nThe `extended` option allows to choose between parsing the URL-encoded data\nwith the `querystring` library (when `false`) or the `qs` library (when\n`true`). The "extended" syntax allows for rich objects and arrays to be\nencoded into the URL-encoded format, allowing for a JSON-like experience\nwith URL-encoded. For more information, please\n[see the qs library](https://www.npmjs.org/package/qs#readme).\n\nDefaults to `true`, but using the default has been deprecated. Please\nresearch into the difference between `qs` and `querystring` and choose the\nappropriate setting.\n\n##### inflate\n\nWhen set to `true`, then deflated (compressed) bodies will be inflated; when\n`false`, deflated bodies are rejected. Defaults to `true`.\n\n##### limit\n\nControls the maximum request body size. If this is a number, then the value\nspecifies the number of bytes; if it is a string, the value is passed to the\n[bytes](https://www.npmjs.com/package/bytes) library for parsing. Defaults\nto `\'100kb\'`.\n\n##### parameterLimit\n\nThe `parameterLimit` option controls the maximum number of parameters that\nare allowed in the URL-encoded data. If a request contains more parameters\nthan this value, a 413 will be returned to the client. Defaults to `1000`.\n\n##### type\n\nThe `type` option is used to determine what media type the middleware will\nparse. This option can be a function or a string. If a string, `type` option\nis passed directly to the [type-is](https://www.npmjs.org/package/type-is#readme)\nlibrary and this can be an extension name (like `urlencoded`), a mime type (like\n`application/x-www-form-urlencoded`), or a mime type with a wildcard (like\n`*/x-www-form-urlencoded`). If a function, the `type` option is called as\n`fn(req)` and the request is parsed if it returns a truthy value. Defaults\nto `application/x-www-form-urlencoded`.\n\n##### verify\n\nThe `verify` option, if supplied, is called as `verify(req, res, buf, encoding)`,\nwhere `buf` is a `Buffer` of the raw request body and `encoding` is the\nencoding of the request. The parsing can be aborted by throwing an error.\n\n## Errors\n\nThe middlewares provided by this module create errors depending on the error\ncondition during parsing. The errors will typically have a `status` property\nthat contains the suggested HTTP response code and a `body` property containing\nthe read body, if available.\n\nThe following are the common errors emitted, though any error can come through\nfor various reasons.\n\n### content encoding unsupported\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an encoding but the "inflation" option was set to `false`. The\n`status` property is set to `415`.\n\n### request aborted\n\nThis error will occur when the request is aborted by the client before reading\nthe body has finished. The `received` property will be set to the number of\nbytes received before the request was aborted and the `expected` property is\nset to the number of expected bytes. The `status` property is set to `400`.\n\n### request entity too large\n\nThis error will occur when the request body\'s size is larger than the "limit"\noption. The `limit` property will be set to the byte limit and the `length`\nproperty will be set to the request body\'s length. The `status` property is\nset to `413`.\n\n### request size did not match content length\n\nThis error will occur when the request\'s length did not match the length from\nthe `Content-Length` header. This typically occurs when the request is malformed,\ntypically when the `Content-Length` header was calculated based on characters\ninstead of bytes. The `status` property is set to `400`.\n\n### stream encoding should not be set\n\nThis error will occur when something called the `req.setEncoding` method prior\nto this middleware. This module operates directly on bytes only and you cannot\ncall `req.setEncoding` when using this module. The `status` property is set to\n`500`.\n\n### unsupported charset "BOGUS"\n\nThis error will occur when the request had a charset parameter in the\n`Content-Type` header, but the `iconv-lite` module does not support it OR the\nparser does not support it. The charset is contained in the message as well\nas in the `charset` property. The `status` property is set to `415`.\n\n### unsupported content encoding "bogus"\n\nThis error will occur when the request had a `Content-Encoding` header that\ncontained an unsupported encoding. The encoding is contained in the message\nas well as in the `encoding` property. The `status` property is set to `415`.\n\n## Examples\n\n### Express/Connect top-level generic\n\nThis example demonstrates adding a generic JSON and URL-encoded parser as a\ntop-level middleware, which will parse the bodies of all incoming requests.\nThis is the simplest setup.\n\n```js\nvar express = require(\'express\')\nvar bodyParser = require(\'body-parser\')\n\nvar app = express()\n\n// parse application/x-www-form-urlencoded\napp.use(bodyParser.urlencoded({ extended: false }))\n\n// parse application/json\napp.use(bodyParser.json())\n\napp.use(function (req, res) {\n  res.setHeader(\'Content-Type\', \'text/plain\')\n  res.write(\'you posted:\\n\')\n  res.end(JSON.stringify(req.body, null, 2))\n})\n```\n\n### Express route-specific\n\nThis example demonstrates adding body parsers specifically to the routes that\nneed them. In general, this is the most recommended way to use body-parser with\nExpress.\n\n```js\nvar express = require(\'express\')\nvar bodyParser = require(\'body-parser\')\n\nvar app = express()\n\n// create application/json parser\nvar jsonParser = bodyParser.json()\n\n// create application/x-www-form-urlencoded parser\nvar urlencodedParser = bodyParser.urlencoded({ extended: false })\n\n// POST /login gets urlencoded bodies\napp.post(\'/login\', urlencodedParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  res.send(\'welcome, \' + req.body.username)\n})\n\n// POST /api/users gets JSON bodies\napp.post(\'/api/users\', jsonParser, function (req, res) {\n  if (!req.body) return res.sendStatus(400)\n  // create user in req.body\n})\n```\n\n### Change accepted type for parsers\n\nAll the parsers accept a `type` option which allows you to change the\n`Content-Type` that the middleware will parse.\n\n```js\nvar express = require(\'express\')\nvar bodyParser = require(\'body-parser\')\n\nvar app = express()\n\n// parse various different custom JSON types as JSON\napp.use(bodyParser.json({ type: \'application/*+json\' }))\n\n// parse some custom thing into a Buffer\napp.use(bodyParser.raw({ type: \'application/vnd.custom-type\' }))\n\n// parse an HTML body into a string\napp.use(bodyParser.text({ type: \'text/html\' }))\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/body-parser.svg\n[npm-url]: https://npmjs.org/package/body-parser\n[travis-image]: https://img.shields.io/travis/expressjs/body-parser/master.svg\n[travis-url]: https://travis-ci.org/expressjs/body-parser\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/body-parser/master.svg\n[coveralls-url]: https://coveralls.io/r/expressjs/body-parser?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/body-parser.svg\n[downloads-url]: https://npmjs.org/package/body-parser\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n',
39 silly resolved     readmeFilename: 'README.md',
39 silly resolved     bugs: { url: 'https://github.com/expressjs/body-parser/issues' },
39 silly resolved     _id: 'body-parser@1.16.0',
39 silly resolved     _from: 'body-parser@' } ]
40 info install body-parser@1.16.0 into /home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL
41 info installOne body-parser@1.16.0
42 info /home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser unbuild
43 info preuninstall body-parser@1.16.0
44 info uninstall body-parser@1.16.0
45 verbose true,/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules,/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules unbuild body-parser@1.16.0
46 info postuninstall body-parser@1.16.0
47 info /home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser unbuild
48 info preuninstall body-parser@1.16.0
49 info uninstall body-parser@1.16.0
50 verbose true,/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules,/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules unbuild body-parser@1.16.0
51 info postuninstall body-parser@1.16.0
52 error error rolling back Error: EACCES, unlink '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md'
52 error error rolling back  body-parser@1.16.0 { [Error: EACCES, unlink '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md']
52 error error rolling back   errno: 3,
52 error error rolling back   code: 'EACCES',
52 error error rolling back   path: '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md' }
53 error Error: EACCES, unlink '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md'
53 error  { [Error: EACCES, unlink '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md']
53 error   errno: 3,
53 error   code: 'EACCES',
53 error   path: '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md' }
54 error Please try running this command again as root/Administrator.
55 error System Linux 4.4.0-31-generic
56 error command "/usr/bin/nodejs" "/usr/bin/npm" "install" "--save" "body-parser"
57 error cwd /home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/TestRestify/rest1
58 error node -v v0.10.25
59 error npm -v 1.3.10
60 error path /home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md
61 error code EACCES
62 error errno 3
63 error stack Error: EACCES, unlink '/home/deptraisatthu/lamviec/adcoffee/00-mainProject/06-RESTFUL/node_modules/body-parser/HISTORY.md'
64 verbose exit [ 3, true ]
